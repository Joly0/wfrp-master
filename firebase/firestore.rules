rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {
   
        match /parties/{party=**} {
            allow read: if request.auth.uid != null
                        && request.auth.uid in resource.data.users;
        }

        match /parties/{partyId} {
            allow create: if request.auth != null && isValidNewParty(request.resource.data, request.auth.uid);
            allow write: if request.auth != null && onlyUserAdded();

            match /characters/{userId} {
                allow create: if hasAccessToParty()
                                && userId == request.auth.uid
                                && isValidCharacter(request.resource.data);
                allow update: if canEditCharacter()
                              && isValidCharacter(request.resource.data);
                allow read: if hasAccessToParty();

                match /inventory/{itemId} {
                    allow read: if hasAccessToParty();
                    allow create: if canEditCharacter() && isValidInventoryItem(request.resource.data);
                    allow update: if canEditCharacter() && isValidInventoryItem(request.resource.data);
                    allow delete: if canEditCharacter();

                    function isValidInventoryItem(item) {
                        return item.keys().toSet() == ["id", "name", "description", "quantity"].toSet()
                            && item.id is string && item.id == itemId && isValidUuid(item.id)
                            && item.name is string && isNotBlank(item.name)
                            && item.description is string
                            && item.quantity is int && item.quantity > 0;
                    }
                }

                match /skills/{skillId} {
                    allow read: if hasAccessToParty();
                    allow create: if canEditCharacter() && isValidSkill(request.resource.data);
                    allow update: if canEditCharacter() && isValidSkill(request.resource.data);
                    allow delete: if canEditCharacter();

                    function isValidSkill(skill) {
                        return skill.keys().toSet() == ["id", "name", "description", "advanced", "characteristic"].toSet()
                            && skill.id is string && skill.id == skillId && isValidUuid(skill.id)
                            && skill.name is string && skill.name != ""
                            && skill.description is string
                            && skill.advanced is bool
                            && skill.characteristic in ["AGILITY", "INTELLIGENCE", "FELLOWSHIP", "STRENGTH", "TOUGHNESS", "WILL_POWER"]
                    }
                }

                function areMoneyValid(money) {
                    return money is map
                        && money.keys().toSet() == ["pennies"].toSet()
                        && money.pennies is int && money.pennies >= 0;
                }

                function canEditCharacter() {
                    return hasAccessToParty()
                        && (isGameMaster() || request.auth.uid == userId);
                }

                function isValidCharacter(character) {
                    return character.keys().toSet() == ["name", "career", "points", "race", "stats", "userId", "money"].toSet()
                        && character.userId == userId
                        && character.name is string && isNotBlank(character.name)
                        && character.career is string && isNotBlank(character.career)
                        && character.race is string && character.race in ["HUMAN", "ELF", "DWARF", "HALFLING", "GNOME"]
                        && arePointsValid(character.points)
                        && areStatsValid(character.stats)
                    && areMoneyValid(character.money);
                }
            }

            function arePointsValid(points) {
                return points is map
                    && points.keys().toSet() == ["insanity", "fate", "fortune", "maxWounds", "wounds"].toSet()
                    && points.insanity is int && points.insanity >= 0
                    && points.fate is int && points.fate >= 0
                    && points.fortune is int && points.fortune >= 0 && points.fortune <= points.fate
                    && points.maxWounds is int && points.maxWounds >= 0
                    && points.wounds is int && points.wounds >= 0 && points.wounds <= points.maxWounds;
            }

            function areStatsValid(stats) {
                return stats is map
                    && stats.keys().toSet() == [
                        "weaponSkill",
                        "ballisticSkill",
                        "strength",
                        "toughness",
                        "agility",
                        "intelligence",
                        "willPower",
                        "fellowship",
                        "magic"
                    ].toSet()
                    && stats.weaponSkill >= 0 && stats.weaponSkill <= 100
                    && stats.ballisticSkill >= 0 && stats.ballisticSkill <= 100
                    && stats.strength >= 0 && stats.strength <= 100
                    && stats.toughness >= 0 && stats.toughness <= 100
                    && stats.agility >= 0 && stats.agility <= 100
                    && stats.intelligence >= 0 && stats.intelligence <= 100
                    && stats.willPower >= 0 && stats.willPower <= 100
                    && stats.fellowship >= 0 && stats.fellowship <= 100
                    && stats.magic >= 0 && stats.magic <= 100;
            }

            function isValidUuid(maybeUuid) {
                return maybeUuid.matches("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
            }

            function isValidNewParty(party, uid) {
                return party.keys().toSet() == ["id", "name", "users", "gameMasterId", "accessCode"].toSet()
                    && party.id is string && party.id == partyId && isValidUuid(party.id)
                    && party.name is string && isNotBlank(party.name)
                    && party.users == [uid]
                    && party.gameMasterId == uid
                    && party.accessCode is string && party.accessCode != "";
            }

            function invitation(party) {
                return {"partyId": party.id, "accessCode": party.accessCode};
            }

            function hasInvitation(userId, invitation) {
                return invitation in get(/databases/$(database)/documents/users/$(userId)).data.invitations;
            }

            function isGameMaster() {
                return request.auth != null
                    && request.auth.uid == get(/databases/$(database)/documents/parties/$(partyId)).data.gameMasterId
            }

            function hasAccessToParty() {
                return request.auth != null
                    && request.auth.uid in get(/databases/$(database)/documents/parties/$(partyId)).data.users
            }

            function onlyUserAdded() {
                let userId = request.auth.uid;
                let diff = resource.data.diff(request.resource.data);
                let originalUsers = resource.data.users;
                let newUsers = request.resource.data.users;
                let invitation = invitation(resource.data);

                return diff.affectedKeys() == ["users"].toSet()
                    && hasInvitation(userId, invitation)
                    && originalUsers.toSet().union([userId].toSet()) == newUsers.toSet();
            }
        }

        match /users/{user} {
            allow write: if request.auth.uid != null && user == request.auth.uid && isValidUser(request.resource.data);

            function isValidUser(data) {
                return data.keys() == ["invitations"] && data.invitations is list
            }
        }
    }

    //
    // Returns true if string contains at least one character that is not a whitespace
    //
    function isNotBlank(value) {
        return value.replace('\\s', '') != ""
    }
}
